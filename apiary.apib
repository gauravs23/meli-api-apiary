FORMAT: 1A

# Meli Data Centers API
The datacenter REST API will be used to expose details for a data center management application.

# Group Observation
Observation related resources of the **Data Centers API**

## Observation [/observation/{id}]
A single observation object.

The observation resource has the following attributes:

- id
- status
- recordType
- type
- conditions
- name
- title
- description
- referenceUrl
- assetId
- spaceId
- reasonForIgnore
- value
- valueType
- rejectionReason
- rejectionComment

+ Parameters
    + id (string) ... ID of the observation to perform various operations.

+ Model (application/json)
    JSON representation of Observation resource.
    
    + Body
    
            {
                "id": "a02F0000009GoV5",
                "status": "New",
                "recordType": "Alert",
                "type": "Power",
                "conditions": "Power",
                "name": "My Observation",
                "title": "My New Observation: More Detail",
                "description": "rich text",
                "referenceUrl": "url",
                "assetId": "a03F000000A2lm3",
                "spaceId": "a05F000000AS2KJ",
                "reasonForIgnore": "Not Relevant",
                "value": "dollar",
                "valueType": "Efficiency",
                "rejectionReason": "Too Big / Too Complex",
                "rejectionComment": "Revisit and provide brief data"
            }

### Get a Single Observation [GET]
+ Response 200 (application/json)

    [Observation][]
    
### Update an Observation [PATCH]
+ Request (application/json)
    
        {
            "title": "new title"
        }

+ Response 200 (application/json)

    [Observation][]


## Observations List [/observations{?type,assetId,spaceId}]
Collection of observations. The API receives parameters like type, assetId and spaceId which can be used to filter out results based on respective parameters.

The List Of Observations has following attribute:

- observations

+ Model (application/json)
    + Body
    
            {
                "observations" : 
                        [
                            {
                                "id": "a02F0000009GoV5",
                                "status": "New",
                                "recordType": "Alert",
                                "type": "Power",
                                "conditions": "Power",
                                "name": "My Observation",
                                "title": "My New Observation: More Detail",
                                "description": "rich text",
                                "referenceUrl": "url",
                                "assetId": "a03F000000A2lm3",
                                "spaceId": "a05F000000AS2KJ",
                                "reasonForIgnore": "Not Relevant",
                                "value": "dollar",
                                "valueType": "Efficiency",
                                "rejectionReason": "Too Big / Too Complex",
                                "rejectionComment": "Revisit and provide brief data"
                            }
                         ]
            }

### List all observations [GET]
+ Parameters
    + type (optional, string) ... Filter observations by type. E.g. alert.
    + assetId (optional, string) ... Filter notifications by Asset Id. E.g. a03F000000A2lm3.
    + spaceId (optional, string) ... Filter notifications by Space Id. E.g. a05F000000AS2KJ.

+ Response 200 (application/json)

    [Observations List][]

# Group General
General API meta data requests of the **Data Centers API**

## Ping [/{?datetime}]
This will be used to ping the server to see if any subsequent requests should be made.

+ Model (application/json)
    + Body
    
            {
                "alertCount" : 10,
                "recommendationCount" : 15,
                "chatterCount" : 20
            }

### Ping Server [GET]
+ Parameters
    + datetime (string) ... Date time formatted as dd-MM-yyyy hh:MM:ss
    
+ Response 200 (application/json)
    
    [Ping][]


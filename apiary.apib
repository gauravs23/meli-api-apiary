FORMAT: 1A

# Meli Data Centers API
The datacenter REST API will be used to expose details for a data center management application.

# Group Observation
Observation related resources of the **Data Centers API**

All the response in the API will have the **req-status** field which will indicate the request success or failure.

All the error responses like 400 status code, 503 status code will have an error object that will provide the error code and error message.

## Observation [/observation/{id}]
A single observation object.

The observation resource has the following attributes:

- id
- status
- recordType
- type
- conditions
- name
- title
- description
- referenceUrl
- assetId
- spaceId
- reasonForIgnore
- value
- valueType
- rejectionReason
- rejectionComment

+ Parameters
    + id (int) ... ID of the observation to perform various operations.

+ Model (application/json)
    JSON representation of Observation resource.
    
    + Body
    
            {
                "req-status" : true,
                "id": "a02F0000009GoV5",
                "status": "New",
                "recordType": "Alert",
                "type": "Power",
                "conditions": "Power",
                "name": "My Observation",
                "title": "My New Observation: More Detail",
                "description": "rich text",
                "referenceUrl": "url",
                "assetId": "a03F000000A2lm3",
                "spaceId": "a05F000000AS2KJ",
                "reasonForIgnore": "Not Relevant",
                "value": "dollar",
                "valueType": "Efficiency",
                "rejectionReason": "Too Big / Too Complex",
                "rejectionComment": "Revisit and provide brief data"
            }

### Get a Single Observation [GET]
+ Response 200 (application/json)

    [Observation][]

+ Response 400 (application/json)

    + Body
    
            {
                "reqStatus" : false,
                "errorCode" : "MDC_ERROR_1",
                "errorMessage" : "Perhaps the input parameters are not valid."
            }

+ Response 404 (application/json)
    
    + Body
        
            {
                "reqStatus" : false,
                "errorCode" : "MDC_ERROR_2",
                "errorMessage" : "Perhaps the resource you are looking for doesnt exist."
            }

+ Response 500 (application/json)

    + Body
    
            {
                "reqStatus" : false,
                "errorCode" : "MDC_ERROR_3",
                "errorMessage" : "Fatal Application Error has occured. Please contact admin."
            }  
            
+ Response 503 (application/json)

    + Body
    
            {
                "reqStatus" : false,
                "errorCode" : "MDC_ERROR_4",
                "errorMessage" : "Application is unavailable at the moment. Please contact admin."
            }  
    
### Update an Observation [PATCH]
+ Request (application/json)
    
        {
            "title": "new title"
        }

+ Response 200 (application/json)

    [Observation][]


## Observations List [/observations{?type,assetId,spaceId}]
Collection of observations. The API receives parameters like type, assetId and spaceId which can be used to filter out results based on respective parameters.

The List Of Observations has following attribute:

- observations

+ Model (application/json)
    + Body
    
            {
                "observations" : 
                        [
                            {
                                "id": "a02F0000009GoV5",
                                "status": "New",
                                "recordType": "Alert",
                                "type": "Power",
                                "conditions": "Power",
                                "name": "My Observation",
                                "title": "My New Observation: More Detail",
                                "description": "rich text",
                                "referenceUrl": "url",
                                "assetId": "a03F000000A2lm3",
                                "spaceId": "a05F000000AS2KJ",
                                "reasonForIgnore": "Not Relevant",
                                "value": "dollar",
                                "valueType": "Efficiency",
                                "rejectionReason": "Too Big / Too Complex",
                                "rejectionComment": "Revisit and provide brief data"
                            }
                         ]
            }

### List all observations [GET]
+ Parameters
    + type (optional, string) ... Filter observations by type. E.g. alert.
    + assetId (optional, string) ... Filter notifications by Asset Id. E.g. a03F000000A2lm3.
    + spaceId (optional, string) ... Filter notifications by Space Id. E.g. a05F000000AS2KJ.

+ Response 200 (application/json)

    [Observations List][]

# Group General
General API meta data requests of the **Data Centers API**

## Ping [/{?datetime}]
This will be used to ping the server to see if any subsequent requests should be made.

+ Model (application/json)
    + Body
    
            {
                "alertCount" : 10,
                "recommendationCount" : 15,
                "chatterCount" : 20
            }

### Ping Server [GET]
+ Parameters
    + datetime (string) ... Date time formatted as dd-MM-yyyy hh:MM:ss
    
+ Response 200 (application/json)
    
    [Ping][]

# Group Assets
Assets related resources of the **Data Centers API**

The asset resource has the following attributes:

- id
- name
- assetRegisterId
- agreementId
- dataCenterId
- type
- make
- model
- serialNumber
- location
- description
- dateCommissioned
- dataCenterImage

## Asset [/asset/{id}]
A single asset object.

+ Parameters
    + id (string) ... ID of the asset to perform various operations.
    
+ Model (application/json)
    JSON representation of asset resource.
    
    + Body
    
            {
                "id" : "a03F000000A2lm3",
                "name" : "first asset",
                "assetRegisterId" : "a04F000000W9lKs",
                "agreementId" : "a01F000000Fw9Sf",
                "dataCenterId" : "001F0000012rPxV",
                "type" : "Server",
                "make" : "Alles",
                "model" : "a340l",
                "serialNumber" : "ADDlKK330"
                "location" : "NY",
                "description" : "First asset in API",
                "dateCommissioned" : "29-03-2014 23:44:55",
                "dataCenterImage" : "http://www.testimages.api.com/home.jpg" 
            }

### Get a Single Asset [GET]
+ Response 200 (application/json)

    [Asset][]

## Assets List [/assets{?customerId,datacenterId,spaceId,agreementId}]
Collection of Assets. The API receives parameters like customerId, datacenterId, spaceId, agreementId which can be used to filter out results based on respective parameters.

The List Of Assets has following attribute:

- assets

+ Model (application/json)

    + Body
    
            {
                "assets" : 
                        [
                            {
                                "id" : "a03F000000A2lm3",
                                "name" : "first asset",
                                "assetRegisterId" : "a04F000000W9lKs",
                                "agreementId" : "a01F000000Fw9Sf",
                                "dataCenterId" : "001F0000012rPxV",
                                "type" : "Server",
                                "make" : "Alles",
                                "model" : "a340l",
                                "serialNumber" : "ADDlKK330"
                                "location" : "NY",
                                "description" : "First asset in API",
                                "dateCommissioned" : "29-03-2014 23:44:55",
                                "dataCenterImage" : "http://www.testimages.api.com/home.jpg" 
                            }
                         ]
            }

### List all Assets [GET]
+ Parameters
    + customerId (optional, string) ... Filter assets by customer Id. E.g. 001F0000012tDMf
    + datacenterId (optional, string) ... Filter assets by Data Center Id. E.g. 001F0000012rPxV
    + spaceId (optional, string) ... Filter assets by logical Space Id. E.g. a05F000000AS2KJ
    + agreementId (optional, string) ... Filter assets by Agreement Id. E.g. a01F000000Fw9Sf

+ Response 200 (application/json)

    [Assets List][]

# Group Gauge Widgets
Gauge related resources of the **Data Centers API**

The guage resource has the following attributes:

- type
- dataCenterId
- agreementId
- value
- uom
- change
- threshold
- timestamp
- trend

The trend resource has the following attributes:
- unit
- list of label-value pairs

## Guage [/guage/{id}]
A single guage object.

+ Parameters
    + id (string) ... ID of the guage to perform various operations.
    
+ Model (application/json)
    JSON representation of guage resource.
    
    + Body
    
            {
                "type" : "a03F000000A2lm3",
                "dataCenterId" : "first asset",
                "agreementId" : "a04F000000W9lKs",
                "value" : "a01F000000Fw9Sf",
                "uom" : "001F0000012rPxV",
                "change" : "Server",
                "threshold" : "Alles",
                "timestamp" : "a340l",
                "trend" : [
                        {
                            "unit" : "ADDlKK330",
                            "lv-pairs" : [{“M”:1}, {“T”:4}]
                        },
                        {
                            "unit" : "ADDlKK330",
                            "lv-pairs" : [{“M”:1}, {“T”:4}]
                        }
                ]
            }

### Get a Single Guage [GET]
+ Response 200 (application/json)

    [Guage][]

## Guages List [/guages{?type,datacenterId}]
Collection of Guages. The API receives parameters like type, datacenterId which can be used to filter out results based on respective parameters.

The List Of Guages has following attribute:

- guages

+ Model (application/json)

    + Body
    
            {
                "guages" : 
                        [
                            {
                                "type" : "a03F000000A2lm3",
                                "dataCenterId" : "first asset",
                                "agreementId" : "a04F000000W9lKs",
                                "value" : "a01F000000Fw9Sf",
                                "uom" : "001F0000012rPxV",
                                "change" : "Server",
                                "threshold" : "Alles",
                                "timestamp" : "a340l",
                                "trend" : [
                                        {
                                            "unit" : "ADDlKK330",
                                            "lv-pairs" : [{“M”:1}, {“T”:4}]
                                        },
                                        {
                                            "unit" : "ADDlKK330",
                                            "lv-pairs" : [{“M”:1}, {“T”:4}]
                                        }
                                ]
                            }
                         ]
            }

### List all Guages [GET]
+ Parameters
    + type (optional, string) ... Filter widget data by type. E.g. "e"
    + datacenterId (optional, string) ... Filter guage by Data Center Id. E.g. 001F0000012rPxV

+ Response 200 (application/json)

    [Guages List][]

+ Response 400 (application/json)
    
    + Body
        
            {
                "status" : "error"
            }

# Group Data Centers
Data Center related resources of the **Data Centers API**

The date center resource has the following attributes:

- id
- name

## Data Center [/data-center/{id}]
A single data center object.

+ Parameters
    + id (string) ... ID of the data center to perform various operations.
    
+ Model (application/json)
    JSON representation of data center resource.
    
    + Body
    
            {
                "id" : "a03F000000A2lm3",
                "name" : "Primary DC"
            }

### Get a Single Data Center [GET]
+ Response 200 (application/json)

    [Data Center][]

## Data Centers List [/data-centers]
Collection of Data Centers.

The List Of Data Centers has following attribute:

- data-centers

+ Model (application/json)

    + Body
    
            {
                "data-centers" : 
                        [
                            {
                                "id" : "a03F000000A2lm3",
                                "name" : "Primary DC"
                            }
                         ]
            }

### List all Data Centers [GET]

+ Response 200 (application/json)

    [Data Centers List][]
    
## Data Centers List With Assets [/data-centers-assets{?onlyIds,singleAsset}]
Collection of Data Centers with Child Assets.

The List Of Data Centers has following attribute:

- data-centers-assets

+ Model (application/json)

    + Body
    
            {
                "data-centers-assets" : 
                        [
                            {
                                "id" : "a03F000000A2lm3",
                                "name" : "Primary DC"
                            }
                         ]
            }

### List all Data Centers [GET]

+ Response 200 (application/json)

    [Data Centers List With Assets][]

# Group Weather
Weather related resources of the **Data Centers API**


## Weather [/weather{?q, extra, num_of_days, date, fx, cc, includeLocation, show_comments, callback}]
A single weather object.

+ Parameters
    + q (string) ... Location that can be represented as text, IP Address, Latitude longitude or UK/US/Canada zipcodes. E.g. New+York, New+york,ny, 101.25.32.325, 48.834,2.394
    + extra (optional, string) ... Include extra information. If the extra parameter is set to localObsTime, then the response will include the current weather observation time in UTC as well as local time of the location requested.
    + num_of_days (string) ... Number of days of forecast. Example: num_of_days=2
    + date (optional, string) ... Specifies weather for a date. E.g. : Valid values: today, tomorrow, yyyy-MM-dd (Example: 2013-04-20 for 20 April 2013)
    + fx (optional, string) ... Whether to return weather forecast output. Valid values: yes (default), no
    + cc (optional, string) ... Whether to return current weather conditions output. Valid values: yes (default), no
    + includeLocation (optional, string) ... Whether to return the nearest weather point for which the weather data is returned for a given postcode, zipcode and lat/lon values. Valid values: yes, no (default)
    + show_comments (optional, string) ... Whether output contains CSV/TAB comments. Valid values: yes (default), no
    + callback (optional, string) ... The function name for JSON callback.

+ Model (application/json)
    JSON representation of data center resource.
    
    + Body
    
            {
                "weather-data" : {
                        
                        "request-data" : {
                            "type" : "city",
                            "query": "New York"
                        },
                        "current-weather" : {
                            "observation_time" : "06:45 AM",
                            "temp_C" : 20,
                            "windspeedMiles" : 50,
                            "windspeedKmph" : 80,
                            "winddirDegree" : 45,
                            "winddir16Point" : "N",
                            "weatherCode" : 395,
                            "weatherDesc" : "Moderate or heavy snow in area with thunder",
                            "weatherIconUrl" : http://www.google.com/weather/snow.img,
                            "precipMM" : 20,
                            "humidity" : 26.5,
                            "visibility" : 2,
                            "pressure" : 50,
                            "cloudcover" : 26
                        },
                        "weather-forecast" : {
                            "date" : "2013-05-31",
                            "tempMaxC" : 32,
                            "tempMaxF" : 45,
                            "tempMinC" : 12,
                            "tempMinF" : 20,
                            "windspeedMiles" : 60,
                            "windspeedKmph" : 96,
                            "winddirDegree" : 45,
                            "winddir16Point" : "N",
                            "weatherCode" : 374,
                            "weatherDesc" : "Light showers of ice pellets",
                            "weatherIconUrl" : http://www.google.com/weather/snow.img,
                            "precipMM" : 25
                        }
                }
            }

### Get Weather Data [GET]

+ Response 200 (application/json)

    [Weather][]





